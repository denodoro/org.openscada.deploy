#!/usr/bin/env python
# -*- mode: Python; tab-width: 4; indent-tabs-mode: nil -*-

import sys
import os
import subprocess

from os import pathsep
from xml.dom.minidom import parse

profilesDir = os.environ.get ( "PROFILES_DIR", "/usr/share/openscada/profiles" )
target = sys.argv[2]

class Profile:
	"""A class holding profile information"""
	def __init__(self):
		self.features=[]
		self.arguments=[]
		self.bundleStartLevels={}
		self.properties={}
		self.profiles={}

def findProfileFile ( template ):
	if not os.path.exists(profilesDir):
		sys.stderr.write ("'" + profilesDir + "' does not exist\n")
		sys.exit(-1)

	templateFile = "%s%s%s.profile.xml" % (profilesDir, os.sep, template)

	if not os.path.exists ( templateFile ):
		sys.stderr.write ("'" + templateFile + "' does not exist\n")
		sys.exit(-2)

	return templateFile	


def loadProfile ( template ):
	return loadProfileFile ( findProfileFile ( template ) )


def getText(nodelist):
    rc = []
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc.append(node.data)
    return ''.join(rc)


def readProperties ( properties, elements, context = ""):
	for node in elements:
		key = node.attributes["key"].value

		if "unset" in node.attributes.keys():
			properties.remove ( key )
			print "property[%s]: %s -> UNSET" % ( context, key )
		else:
			value = getText(node.childNodes)
			properties[key] = value
			print "property[%s]: %s -> %s" % ( context, key, value )


def performLoad ( p, templateFile ):
	print "Loading: " + templateFile

	dom = parse ( templateFile )
	profile = dom.documentElement

	# print profile.toprettyxml()

	if "parent" in profile.attributes.keys():
		performLoad ( p,  findProfileFile ( profile.attributes["parent"].value ) )

	for node in profile.getElementsByTagName("feature"):
		feature = getText(node.childNodes)
		print "Feature: %s" % feature
		p.features.append ( feature )

	for node in profile.getElementsByTagName("start"):
		bundle = getText(node.childNodes)
		print "Start: %s" % bundle
		p.bundleStartLevels[bundle] = "-1"

	for node in profile.getElementsByTagName("setbsl"):
		bundle = getText(node.childNodes)
		level = node.attributes["level"].value
		print "BSL: %s -> %s" % ( bundle, level )
		p.bundleStartLevels[bundle] = level

	readProperties ( p.properties, profile.getElementsByTagName("property") )

	for node in profile.getElementsByTagName("argument"):
		argument = getText(node.childNodes)
		print "Argument: %s" % argument
		p.arguments.append ( argument )

	for node in profile.getElementsByTagName("profile"):
		name = node.attributes["name"].value
		p.profiles[name]={}
		readProperties ( p.profiles[name], node.getElementsByTagName("property"), name )



def loadProfileFile ( templateFile ):
	p = Profile()
	performLoad ( p, templateFile )
	return p

def writeArguments(fileName, arguments):
	if len(arguments):
		f = open ( fileName, "w" )	
		for arg in arguments:
			f.write ( arg + "\n" )
		f.close ()

def writeStartLevels(fileName, bundleStartLevels):
	if len(bundleStartLevels.keys()):
		f = open ( fileName, "w" )	
		for key in bundleStartLevels.keys():
			f.write ( "%s=%s\n" % ( key, bundleStartLevels[key]) )
		f.close ()

def writeProperties(fileName, properties, force = True):
	if len(properties.keys()) or force:
		f = open ( fileName, "w" )	
		for key in properties.keys():
			f.write ( "%s=%s\n" % ( key, properties[key]) )
		f.close ()

def writeProfiles(target, profiles):
	for key in profiles.keys():
		writeProperties ( target + os.sep + "launcher." + key + ".properties", profiles[key] )

def createInstance ( target, p ):
	#subprocess.call ( ["p2.create", target] );
	#subprocess.call ( ["p2.install", target ] + p.features );
	writeArguments ( target + os.sep + "launcher.args", p.arguments )
	writeProperties ( target + os.sep + "launcher.properties", p.properties, False )
	writeStartLevels ( target + os.sep + "startLevels.properties", p.bundleStartLevels )
	writeProfiles ( target, p.profiles )

createInstance ( target, loadProfile(sys.argv[1]) )


