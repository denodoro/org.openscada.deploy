#!/usr/bin/env python

import sys
import os
import glob
import string
import codecs

from os import pathsep
from string import split
from os.path import exists, join, abspath

def searchPath(filename, pathToSearch):
    """Given a search path, find file
    """
    print "search " + pathToSearch
    for path in string.split(pathToSearch, pathsep):
       if exists(join(path, filename)):
           return abspath(join(path, filename))
      
    return None

def findJava():
    """ Find a valid java installation
    """
    java = "jre/bin/java"
    if ( exists(java)):
        return java
    
    if os.environ.get("JAVA_HOME",None):
        java = os.environ.get("JAVA_HOME",None) + os.sep + "bin"  + os.sep + "java"
        if os.path.exists(java):
            return java
        
    if os.environ.get("JRE_HOME",None):
        java = os.environ.get("JRE_HOME",None) + os.sep + "bin"  + os.sep + "java"
        if os.path.exists(java):
            return java
        
    java = searchPath("java",os.environ.get("PATH"))
    if java:
        return java
        
    return None

def appendSystemProperties ( args, props ):
    for key,value in props.items():
        args.append ( "-D" + key + "=" + value )
    
def getProperties():
    properties = {
        "eclipse.ignoreApp":"true",
        "osgi.noShutdown":"true"
    } 
    
    if os.path.exists("launcher.properties"):
        f = codecs.open ( "launcher.properties", encoding="UTF-8" )
        for line in f:
            key,value = line.strip().split ( "=", 1 )
            properties[key] = value
        f.close ()
    
    return properties;

def appendJVMArguments(args):
    if os.path.exists("launcher.args"):
        f = codecs.open ( "launcher.args", encoding="UTF-8" )
        for line in f:
            args.append ( line.strip () )
        f.close ()

def main(argv):
    appdir = os.path.dirname  ( os.path.abspath ( sys.argv[0] ) )
    os.chdir(appdir)
    matches = glob.glob ( "plugins/org.eclipse.equinox.launcher_*.jar" );
    if len(matches) == 0:
        raise Exception ( "No launcher found" )
    if len(matches) > 2:
        sys.stderr.write ( "More than one launcher was detected: " + matches )
        
    launcher = matches[0]
    
    java = findJava ()
    if not java:
        raise Exception("Unable to find JVM")

    commandName = os.environ.get("COMMAND_NAME","launcher")

    args = [commandName]
    
    appendSystemProperties ( args, getProperties () )
    appendJVMArguments ( args );
    
    args.append ( "-jar" )
    args.append ( launcher )
    args.append ( "org.eclipse.equinox.launcher.Main" )
    
    if len(argv) == 0:
        args.append ( "-console" )
    else:
        args.extend ( argv )
    
    print "calling : " + str(args)
    
    os.execv ( java, args )
    
if __name__ == "__main__":
    #try:
        main(sys.argv[1:])
    #except Exception, e:
    #    sys.stderr.write ( "Error occurred: " + e.message + os.linesep )
